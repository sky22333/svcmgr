name: Build and Release Android APK

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Build release APK
      run: ./gradlew assembleRelease
      
    - name: Build AAB (Android App Bundle)
      run: ./gradlew bundleRelease
      
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "30.0.3"
        
    - name: Get release tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        release_name: Android Service Manager ${{ steps.get_tag.outputs.tag }}
        draft: false
        prerelease: false
        body: |
          ## 🚀 Android Service Manager ${{ steps.get_tag.outputs.tag }}
          
          ### 📱 下载
          - **APK (通用版)**: 支持所有架构的设备
          - **APK (分架构版)**: 针对特定架构优化的版本
          - **AAB**: Google Play 上架版本
          
          ### ✨ 功能特性
          - 🔧 二进制文件管理（支持多ABI架构）
          - 🚀 进程启动、停止、监控
          - 🔄 自动重启机制
          - 📊 实时日志显示
          - ⚙️ 配置管理
          - 🎨 Material Design 3 界面
          
          ### 🏗️ 技术栈
          - Kotlin + Jetpack Compose
          - Android Architecture Components
          - Material Design 3
          - Foreground Service
          
          ### 📋 系统要求
          - Android 7.0 (API 24) 及以上版本
          - 支持架构: armeabi-v7a, arm64-v8a, x86, x86_64
          
          ---
          
          ### 📥 安装说明
          1. 下载对应的APK文件
          2. 在设备上启用"未知来源"安装
          3. 安装APK并授予必要权限
          4. 将二进制文件放置在assets目录结构中重新打包，或通过应用内管理功能添加
          
          ### 🔧 使用说明
          1. 在"管理"页面查看可用的二进制文件
          2. 在"配置"页面设置启动参数
          3. 在"主页"启动服务
          4. 在"日志"页面查看运行状态
          
    - name: Upload Universal APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-universal-release.apk
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}-universal.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload ARM64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-arm64-v8a-release.apk
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}-arm64-v8a.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload ARMv7 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-armeabi-v7a-release.apk
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}-armeabi-v7a.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload x86_64 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-x86_64-release.apk
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}-x86_64.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload x86 APK
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/apk/release/app-x86-release.apk
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}-x86.apk
        asset_content_type: application/vnd.android.package-archive
        
    - name: Upload AAB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: app/build/outputs/bundle/release/app-release.aab
        asset_name: android-service-manager-${{ steps.get_tag.outputs.tag }}.aab
        asset_content_type: application/octet-stream